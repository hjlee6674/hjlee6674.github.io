---
layout: post
title:  "Markdown 1"
categories: Study
---
# 목차
- [목차](#목차)
- [1. 마크다운이란?](#1-마크다운이란)
- [2. 제목 지정](#2-제목-지정)
- [3. 텍스트](#3-텍스트)
  - [3-1. 텍스트 스타일](#3-1-텍스트-스타일)
  - [3-2. 텍스트 인용](#3-2-텍스트-인용)
  - [3-3. 백틱 \`의 사용](#3-3-백틱-의-사용)
- [4. 링크](#4-링크)
- [5. 목록](#5-목록)
   
# 1. 마크다운이란?
Markdown은 문서나 데이터의 구조를 명기하는 언어의 하나로, HTML, LaTeX와 같은 계열의 언어이다.
LaTeX는 다루어본 경험이 많기 때문에 익숙하지만, GitHub의 Page 기능을 이용하기 위해서는 Markdown 사용법을 숙지하고 있어야 한다.
물론, HTML도 필수적이다. LaTeX처럼 문서의 구조를 구성함에 있어 고유의 문법을 사용하기 때문에 우선 이 문법들을 공부할 예정이다.

# 2. 제목 지정
LaTeX에서 문서의 순서나 제목을 지정할 때, `\section{}, \subsection{}, ...`을 사용한다. Markdown에서는 \# 기호를 사용하여 제목을 지정할 수 있다.
```
# 1 (# 다음 띄어쓰기 필수)
```
LaTeX에서 `\subsection{}`은 `\section{}`의 보다 작은 단위의 제목이다. 이 기능은 \#의 개수를 늘려주면 된다.
```
# 1
## 1.1
```
'제목 지정 1.1'은 '제목 지정 1'의 내부에 포함된다.

# 3. 텍스트

## 3-1. 텍스트 스타일
텍스트의 스타일을 지정하는 방법은 다음과 같다.

`**굵은 텍스트**`  : **굵은 텍스트**

`__굵은 텍스트__`  : __굵은 텍스트__

`*기울여진 텍스트*` : *기울여진 텍스트*

`_기울여진 텍스트_` : _기울여진 텍스트_

`~~취소선 텍스트~~` : ~~취소선 텍스트~~

`**_기울여진_ _텍스트와_ 굵은 텍스트**` : **_기울여진_ _텍스트와_ 굵은 텍스트**

`***모두 굵고 기울여진 텍스트 ***` : ***모두 굵고 기울여진 텍스트***

`텍스트<sub>밑첨자 텍스트<sub>` : 텍스트<sub>밑첨자 텍스트<sub>

`텍스트<sup>밑첨자 텍스트<sup>` : 텍스트<sup>밑첨자 텍스트<sup>

## 3-2. 텍스트 인용
텍스트를 인용한 느낌의 스타일을 줄 수도 있다. \> 기호를 사용한다.

`>텍스트` : 
> 텍스트

## 3-3. 백틱 \`의 사용
\`는 키보드의 ESC키 바로 아래에서 찾을 수 있는 기호로 다양한 기능이 존재한다.

`` `한 번만 둘러 싼 텍스트` `` : `한 번만 둘러 싼 텍스트`

``` ``두 번 둘러 싼 텍스트`` ``` : ``두 번 둘러 싼 텍스트``

```` ```세 번 둘러 싼 텍스트``` ```` : ```세 번 둘러 싼 텍스트```

위의 세 예제 모두 같은 결과가 도출된다: `한 번만 둘러 싼 텍스트`, ``두 번 둘러 싼 텍스트``, ```세 번 둘러 싼 텍스트```.
하지만 다음과 같이 구성하면 약간 달라진다.
```
텍스트
```
이는 백틱 \` 세 개를 중첩하여 텍스트를 감싼 것인데, 다음과 같이 감싸야 한다.
````
```
텍스트
```
````
이 문법을 이용해 코드 문법이 적용된 스타일을만들 수 있다. 시작하는 \```에 원하는 언어를 적으면 적용된다.

````
```ruby
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
```
````
는 실제로 
```ruby
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
```
로 보여진다.

# 4. 링크
텍스트에 링크를 걸 수도 있다. 다음과 같은 문장에서 B에 A를 설명하는 링크를 걸고 싶다.
```
A는 B에서 확인할 수 있다.
```
그러면 다음과 같이 구성하여

```
A는 [B](https://link)에서 확인할 수 있다.
```
다음과 같은 결과를 얻는다.

>A는 [B](https://github.com)에서 확인할 수 있다.

B에는 GitHub 링크를 걸어놓았다.

# 5. 목록
\*, \+, \-를 이용하여 목록을 구성할 수 있다.
```
- 목록 1
+ 목록 2
* 목록 3
```
은
* 목록 1
- 목록 2
+ 목록 3

으로 보여진다. \*, \+, \-의 순서가 바뀌더라도 목록은 성립한다. 혹은, 
숫자를 이용하여 순서가 있는 목록을 만들 수 있다.

```
1. 목록 1
2. 목록 2
3. 목록 3
```
은
1. 목록 1
2. 목록 2
3. 목록 3

으로 보여진다. 목록 안의 목록도 구성이 가능한데, 목록의 깊이는 `tab`키를 눌러 들여쓰기하여
구분한다.
```
1. 목록 1
  - 목록 1-1
    - 목록 1-1-1
2. 목록 2
```
은
1. 목록 1
  - 목록 1-1
    - 목록 1-1-1
2. 목록 2

으로 보여진다.

더 자세한 내용은 [GitHub Docs](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github)에서 확인할 수 있다.


<!-- You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ -->
